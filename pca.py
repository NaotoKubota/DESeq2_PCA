import argparse
import sys
import pandas as pd
import numpy as np
import scipy.stats as stats
from sklearn.linear_model import LinearRegression
from sklearn.decomposition import PCA

def get_args():
	## Get arguments from command line

	parser = argparse.ArgumentParser(
		formatter_class = argparse.ArgumentDefaultsHelpFormatter,
		description = "PCA for gene expression data"
	)

	parser.add_argument("tpm", type = str, help = "TPM file generated by Shiba")
	parser.add_argument("experiment", type = str, help = "Experiment table")
	parser.add_argument("ref", type = str, help = "Reference group")
	parser.add_argument("exp", type = str, help = "Experiment group")
	parser.add_argument("pca", type = str, help = "Output text file for PCs")
	parser.add_argument("contribution", type = str, help = "Output text file for contribution of each PC")
	parser.add_argument("-n", type = int, help = "Number of PCs to be used for DESeq2", default = 3)

	args = parser.parse_args()

	return(args)

def import_data(TPM) -> pd.DataFrame:
	## Import TPM file

	df = pd.read_csv(TPM, sep = "\t", index_col = [0])

	return(df)

def import_experiment(experiment) -> pd.DataFrame:
	## Import experiment table

	df = pd.read_csv(experiment, sep = "\t", usecols = ["sample", "group"], dtype = {"sample": str, "group": str})

	return(df)

def pca(df) -> pd.DataFrame:

	# Drop rows with all 0s
	df = df.T
	df = df.T[~(df.sum() == 0)]

	# Normalization
	normalized_df = df.T.apply(lambda x: (x-x.mean())/x.std(), axis=0)

	# PCA
	pca = PCA()
	pca.fit(normalized_df)
	feature = pca.transform(normalized_df)
	feature_df = pd.DataFrame(feature, columns=["PC{}".format(x + 1) for x in range(len(feature))])
	feature_df.index = df.columns
	feature_df = feature_df.reset_index().rename(columns = {"index": "sample"})
	contribution_df = pd.DataFrame(pca.explained_variance_ratio_, index=["PC{}".format(x + 1) for x in range(len(feature))])

	return(feature_df, contribution_df)

def main():
	## Main function

	args = get_args()

	# Get sample names
	experiment_df = import_experiment(args.experiment)
	samples = experiment_df[(experiment_df["group"] == args.ref) | (experiment_df["group"] == args.exp)]["sample"].tolist()

	# Import TPM file
	df = import_data(args.tpm)

	# Filter TPM file
	df = df[samples]

	# PCA
	feature_df, contribution_df = pca(df)
	feature_df.to_csv(args.pca, sep = "\t")
	contribution_df.to_csv(args.contribution, sep = "\t")

	# Output PCs
	feature_df.iloc[:, 0:args.n+1].to_csv(args.pca, sep = "\t", index = False)

if __name__ == "__main__":

	main()
